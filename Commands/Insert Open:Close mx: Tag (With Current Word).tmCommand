<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
#
# This script will expand the current word into: &lt;mx:word&gt;&lt;/mx:word&gt;
# It will recognize MXML controls that need no close tag.
#
# With no current word, it will insert: &lt;mx:|&gt;&lt;/mx:&gt; and allows you
# to fill in the name of the tag
#
# The result is inserted as a snippet, so it's
# possible to tab through the place holders.

# single tags
single        = /^(?:Button|CheckBox|ColorPicker|ComboBox|DateChooser|DateField|DataGridColumn|HRule|HSlider|Image|Label|MenuBar|NumericStepper|PopUpMenuButton|PopUpButton|ProgressBar|RadioButtonGroup|Spacer|Text|TextArea|TextInput|VSlider|Slider)$/i

# handle the case where caret is in the middle of a word, assume only the left part is the tag
index = ENV['TM_LINE_INDEX'].to_i - ENV['TM_INPUT_START_LINE_INDEX'].to_i
tag, suffix = STDIN.read, ''
if index &lt; tag.length &amp;&amp; !ENV['TM_SELECTED_TEXT']
  tag, suffix = tag[0...index], tag[index..-1]
end

print case tag
  when single then        "&lt;mx:#{tag} $1/&gt;"
  when '' then            "&lt;mx:${1:}&gt;$2&lt;/mx:${1/\\s.*//}&gt;"
  else                    "&lt;mx:#{tag}&gt;$1&lt;/mx:#{tag.strip[/^\S+/]}&gt;"
end

print suffix</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^&lt;</string>
	<key>name</key>
	<string>Insert Open/Close mx: Tag (With Current Word)</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.xml.mxml</string>
	<key>uuid</key>
	<string>B22F64F3-196A-448E-BD6F-93DC6CA12CBA</string>
</dict>
</plist>
